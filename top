[33mcommit 5059251cbafb03331ce696a417a0575add012483[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
Author: kilianBertholon <kilian.bertholon02@gmail.com>
Date:   Fri Mar 24 14:16:12 2023 +0100

    d√©pot 24/03 application fonctionnel

[1mdiff --git a/__pycache__/pente.cpython-39.pyc b/__pycache__/pente.cpython-39.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..d1295f6[m
Binary files /dev/null and b/__pycache__/pente.cpython-39.pyc differ
[1mdiff --git a/a_cote.py b/a_cote.py[m
[1mnew file mode 100644[m
[1mindex 0000000..a2db14d[m
[1m--- /dev/null[m
[1m+++ b/a_cote.py[m
[36m@@ -0,0 +1,147 @@[m
[32m+[m[32m# -*- coding: utf-8 -*-[m
[32m+[m[32m"""[m
[32m+[m[32mCreated on Fri Mar 24 13:42:42 2023[m
[32m+[m
[32m+[m[32m@author: kilia[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m[32mimport pandas as pd[m
[32m+[m[32mimport numpy as np[m
[32m+[m[32mimport os[m
[32m+[m[32mimport matplotlib.pyplot as plt[m
[32m+[m[32mfrom scipy.signal import butter, filtfilt[m
[32m+[m[32mfrom scipy.signal import find_peaks[m
[32m+[m[32mfrom scipy.signal import argrelextrema[m
[32m+[m
[32m+[m[32m# def liste_tests():[m
[32m+[m[32m#     dossier_tests = 'C:/Users/kilia/Desktop/app_projet/test_finaux'  # Sp√©cifiez le dossier o√π se trouvent vos fichiers CSV[m
[32m+[m[32m#     fichiers = os.listdir(dossier_tests)[m
[32m+[m[32m#     fichiers_csv = [f for f in fichiers if f.endswith('.csv')][m
[32m+[m[32m#     return fichiers_csv[m
[32m+[m
[32m+[m[32m# dossier_tests = 'C:/Users/kilia/Desktop/app_projet/test_finaux'  # Sp√©cifiez le dossier o√π se trouvent vos fichiers CSV[m
[32m+[m
[32m+[m[32m#def analyse_capteur(fichiers_csv):[m
[32m+[m
[32m+[m[32mdata = pd.read_csv("test_finaux/breq1_full.csv", header=0, sep = ";")[m
[32m+[m[32mdata = data.iloc[:, :-1][m
[32m+[m[32maccel_x = data['Acc_X'][m
[32m+[m[32maccel_y = data['Acc_Y'][m
[32m+[m[32maccel_z = data['Acc_Z'][m
[32m+[m
[32m+[m[32mgyro_x = data['Gyr_X'][m
[32m+[m[32mgyro_y = data['Gyr_Y'][m
[32m+[m[32mgyro_z = data['Gyr_Z'][m
[32m+[m
[32m+[m[32mmag_x = data['Mag_X'][m
[32m+[m[32mmag_y = data['Mag_Y'][m
[32m+[m[32mmag_z = data['Mag_Z'][m
[32m+[m[32mtime = np.arange((data.shape[0]))/ 60.0  # Convertit les nombres de frame en temps en secondes[m
[32m+[m
[32m+[m[32maccel_magnitude = np.sqrt(accel_x**2 + accel_y**2 + accel_z**2)[m
[32m+[m[32mmag_magnitude = np.sqrt(mag_x**2 + mag_y**2 + mag_z**2)[m
[32m+[m
[32m+[m[32mdef butter_lowpass_filter(data, cutoff, fs, order):[m
[32m+[m[32m    nyq = 0.5 * fs[m
[32m+[m[32m    normal_cutoff = cutoff / nyq[m
[32m+[m[32m    b, a = butter(order, normal_cutoff, btype='low', analog=False)[m
[32m+[m[32m    y = filtfilt(b, a, data)[m
[32m+[m[32m    return y[m
[32m+[m
[32m+[m[32mcutoff = 8 # Fr√©quence de coupure en Hz[m
[32m+[m[32mfs = 60  # Fr√©quence d'√©chantillonnage du capteur en Hz[m
[32m+[m[32morder = 2  # Ordre du filtre[m
[32m+[m
[32m+[m[32maccel_magnitude_filtered = butter_lowpass_filter(accel_magnitude, cutoff, fs, order)[m
[32m+[m
[32m+[m[32mslopes = np.diff(accel_magnitude_filtered)/np.diff(time)[m[41m  [m
[32m+[m
[32m+[m[32mthreshold = 100[m
[32m+[m[32mpositive_slope = slopes > threshold[m
[32m+[m[32mwindow_size = 5[m
[32m+[m[32mstart_index = None[m
[32m+[m[32mfor i in range(len(slopes) - window_size):[m
[32m+[m[32m    if np.all(positive_slope[i:i+window_size]):[m
[32m+[m[32m        start_index = i[m
[32m+[m[32m        break[m
[32m+[m[32mif start_index is not None:[m
[32m+[m[32m    print("Le d√©but du signal est d√©tect√© √† l'index", start_index)[m
[32m+[m[32melse:[m
[32m+[m[32m    print("Le d√©but du signal n'a pas √©t√© d√©tect√©.")[m
[32m+[m[32mslopes = slopes[start_index:][m
[32m+[m
[32m+[m[32mpercentile_90 = np.percentile(slopes, 90)[m
[32m+[m[32mthreshold = -600[m
[32m+[m[32m# Trouver les indices des pics minimums[m
[32m+[m[32mminima_indices = argrelextrema(slopes, np.less, order = 10)[0][m
[32m+[m[32mminima_indices = minima_indices[slopes[minima_indices] < threshold][m
[32m+[m
[32m+[m[32mpeak_height_max = (percentile_90 + percentile_90) / 2[m
[32m+[m
[32m+[m
[32m+[m[32mpeaks, _ = find_peaks(slopes, height=peak_height_max)[m
[32m+[m
[32m+[m[32m#temps de contact au sol[m
[32m+[m[32mtaille_x = len(peaks)[m
[32m+[m[32mtaille_y = len(minima_indices)[m
[32m+[m
[32m+[m[32m# Remplir le tableau plus petit avec des z√©ros[m
[32m+[m[32mif taille_x > taille_y:[m
[32m+[m[32m    minima_indices = np.pad(minima_indices, (0, taille_x - taille_y), mode='constant')[m
[32m+[m[32melse:[m
[32m+[m[32m    peaks = np.pad(peaks, (0, taille_y - taille_x), mode='constant')[m
[32m+[m
[32m+[m[32m# Cr√©er un tableau en colonnes √† partir de x et y[m
[32m+[m[32mtableau = np.column_stack((peaks, minima_indices))[m
[32m+[m
[32m+[m[32m# Cr√©er une nouvelle colonne avec la soustraction entre les donn√©es de la colonne 1 et la colonne 0[m
[32m+[m[32mtableau = np.column_stack((tableau, abs((tableau[:, 1] - tableau[:, 0]))/60))[m
[32m+[m
[32m+[m[32mground_contact = tableau[:, 2][m
[32m+[m
[32m+[m[32m# Tracer les donn√©es d'acc√©l√©ration[m
[32m+[m[32mplt.plot(slopes, label="Pente courbe d'acc√©l√©rations")[m
[32m+[m
[32m+[m[32m# Tracer les pics avec des croix[m
[32m+[m[32mplt.plot(peaks, slopes[peaks], "x", label="Pics max d√©tect√©s")[m
[32m+[m[32mplt.plot(minima_indices, slopes[minima_indices], "o", label="Pics min d√©tect√©s")[m
[32m+[m
[32m+[m[32m# L√©gende et √©tiquettes des axes[m
[32m+[m[32mplt.legend()[m
[32m+[m[32mplt.xlabel("√âchantillons")[m
[32m+[m[32mplt.ylabel("Pente courbe d'acc√©l√©rations")[m
[32m+[m
[32m+[m[32mprint(ground_contact)[m
[32m+[m[32mmedian_ground_contact = np.median(ground_contact)[m
[32m+[m
[32m+[m[32mprint("M√©diane temps de contact au sol :", median_ground_contact)[m
[32m+[m
[32m+[m[32mtps_course = round((len(slopes)/60), 3)[m
[32m+[m[32mprint("temps de course en s :", tps_course)[m
[32m+[m
[32m+[m[32mdistance = 257[m
[32m+[m
[32m+[m[32mvitesse = round((distance / tps_course), 3)[m
[32m+[m[32mprint("vitesse moyenne de course :", vitesse, "m/s", "\n", "ou", round((vitesse*3.6),3), "km/h")[m
[32m+[m
[32m+[m[32mprint("le nombre de foul√©e est : ", len(peaks), "pas", "\n", "ou", "\n", (((len(peaks))*60)/tps_course), "ppm (pas par minute)")[m
[32m+[m
[32m+[m[32mlongueur_foulee = distance/len(peaks)[m
[32m+[m
[32m+[m[32mprint("foul√©e moyenne de :",longueur_foulee, "m")[m
[32m+[m
[32m+[m[32m# Sauvegardez le graphique en tant qu'image PNG[m
[32m+[m[32mplt.savefig('static/mon_graphique.png', bbox_inches='tight')[m
[32m+[m[32m    # Cr√©ez un dictionnaire avec les r√©sultats d'analyse que vous souhaitez afficher[m
[32m+[m[32m#     resultats = {z[m
[32m+[m[32m#         'ground_contact': ground_contact,[m
[32m+[m[32m#         'median_ground_contact': round(median_ground_contact, 3),[m
[32m+[m[32m#         'tps_course': tps_course,[m
[32m+[m[32m#         'vitesse': vitesse,[m
[32m+[m[32m#         'vitesse_km_h': round((vitesse * 3.6), 3),[m
[32m+[m[32m#         'nombre_foulees': len(peaks),[m
[32m+[m[32m#         'ppm': round(((len(peaks) * 60) / tps_course), 3),[m
[32m+[m[32m#         'longueur_foulee': round(longueur_foulee,3)[m
[32m+[m[32m# }[m
[32m+[m[32m#     return resultats[m
[32m+[m
[1mdiff --git a/app.py b/app.py[m
[1mnew file mode 100644[m
[1mindex 0000000..089175d[m
[1m--- /dev/null[m
[1m+++ b/app.py[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32mfrom flask import Flask, render_template, request[m
[32m+[m[32mfrom pente import analyse_capteur, liste_tests[m
[32m+[m[32mimport os[m
[32m+[m[32mfrom pathlib import Path[m
[32m+[m
[32m+[m[32mapp = Flask(__name__)[m
[32m+[m[32mbasedir = Path(__file__).resolve().parent[m
[32m+[m[32mdata_folder = basedir / "test_finaux"[m
[32m+[m
[32m+[m[32m@app.route('/')[m
[32m+[m[32mdef index():[m
[32m+[m[32m    tests_list = liste_tests()[m
[32m+[m[32m    return render_template('index.html', liste_tests=tests_list)[m
[32m+[m
[32m+[m[32m@app.route('/analyse')[m
[32m+[m[32mdef analyse():[m
[32m+[m[32m    test_name = request.args.get('test_name', '')[m
[32m+[m[32m    resultats = analyse_capteur(test_name)[m
[32m+[m[32m    return render_template('analyse.html', resultats=resultats)[m
[32m+[m
[32m+[m[32m@app.route('/historique')[m
[32m+[m[32mdef historique():[m
[32m+[m[32m    return render_template('historique.html')[m
[32m+[m
[32m+[m[32mif __name__ == '__main__':[m
[32m+[m[32m    app.run(debug=True)[m
[1mdiff --git a/image/digisport.png b/image/digisport.png[m
[1mnew file mode 100644[m
[1mindex 0000000..ea30fb3[m
Binary files /dev/null and b/image/digisport.png differ
[1mdiff --git a/pente.py b/pente.py[m
[1mnew file mode 100644[m
[1mindex 0000000..4a366a2[m
[1m--- /dev/null[m
[1m+++ b/pente.py[m
[36m@@ -0,0 +1,140 @@[m
[32m+[m[32mimport pandas as pd[m
[32m+[m[32mimport numpy as np[m
[32m+[m[32mimport os[m
[32m+[m[32mimport matplotlib.pyplot as plt[m
[32m+[m[32mfrom scipy.signal import butter, filtfilt[m
[32m+[m[32mfrom scipy.signal import find_peaks[m
[32m+[m[32mfrom scipy.signal import argrelextrema[m
[32m+[m
[32m+[m[32mdef liste_tests():[m
[32m+[m[32m    dossier_tests = 'C:/Users/kilia/Desktop/app_projet/test_finaux'  # Sp√©cifiez le dossier o√π se trouvent vos fichiers CSV[m
[32m+[m[32m    fichiers = os.listdir(dossier_tests)[m
[32m+[m[32m    fichiers_csv = [f for f in fichiers if f.endswith('.csv')][m
[32m+[m[32m    return fichiers_csv[m
[32m+[m
[32m+[m[32mdossier_tests = 'C:/Users/kilia/Desktop/app_projet/test_finaux'  # Sp√©cifiez le dossier o√π se trouvent vos fichiers CSV[m
[32m+[m
[32m+[m[32mdef analyse_capteur(fichiers_csv):[m
[32m+[m
[32m+[m[32m    data = pd.read_csv(os.path.join(dossier_tests, fichiers_csv), skiprows=10)[m
[32m+[m[32m    accel_x = data['Acc_X'][m
[32m+[m[32m    accel_y = data['Acc_Y'][m
[32m+[m[32m    accel_z = data['Acc_Z'][m
[32m+[m[41m    [m
[32m+[m[32m    gyro_x = data['Gyr_X'][m
[32m+[m[32m    gyro_y = data['Gyr_Y'][m
[32m+[m[32m    gyro_z = data['Gyr_Z'][m
[32m+[m[41m    [m
[32m+[m[32m    mag_x = data['Mag_X'][m
[32m+[m[32m    mag_y = data['Mag_Y'][m
[32m+[m[32m    mag_z = data['Mag_Z'][m
[32m+[m[32m    time = np.arange((data.shape[0]))/ 60.0  # Convertit les nombres de frame en temps en secondes[m
[32m+[m[41m    [m
[32m+[m[32m    accel_magnitude = np.sqrt(accel_x**2 + accel_y**2 + accel_z**2)[m
[32m+[m[32m    mag_magnitude = np.sqrt(mag_x**2 + mag_y**2 + mag_z**2)[m
[32m+[m[41m    [m
[32m+[m[32m    def butter_lowpass_filter(data, cutoff, fs, order):[m
[32m+[m[32m        nyq = 0.5 * fs[m
[32m+[m[32m        normal_cutoff = cutoff / nyq[m
[32m+[m[32m        b, a = butter(order, normal_cutoff, btype='low', analog=False)[m
[32m+[m[32m        y = filtfilt(b, a, data)[m
[32m+[m[32m        return y[m
[32m+[m[41m    [m
[32m+[m[32m    cutoff = 8 # Fr√©quence de coupure en Hz[m
[32m+[m[32m    fs = 60  # Fr√©quence d'√©chantillonnage du capteur en Hz[m
[32m+[m[32m    order = 2  # Ordre du filtre[m
[32m+[m[41m    [m
[32m+[m[32m    accel_magnitude_filtered = butter_lowpass_filter(accel_magnitude, cutoff, fs, order)[m
[32m+[m[41m    [m
[32m+[m[32m    slopes = np.diff(accel_magnitude_filtered)/np.diff(time)[m[41m  [m
[32m+[m[41m    [m
[32m+[m[32m    threshold = 100[m
[32m+[m[32m    positive_slope = slopes > threshold[m
[32m+[m[32m    window_size = 5[m
[32m+[m[32m    start_index = None[m
[32m+[m[32m    for i in range(len(slopes) - window_size):[m
[32m+[m[32m        if np.all(positive_slope[i:i+window_size]):[m
[32m+[m[32m            start_index = i[m
[32m+[m[32m            break[m
[32m+[m[32m    if start_index is not None:[m
[32m+[m[32m        print("Le d√©but du signal est d√©tect√© √† l'index", start_index)[m
[32m+[m[32m    else:[m
[32m+[m[32m        print("Le d√©but du signal n'a pas √©t√© d√©tect√©.")[m
[32m+[m[32m    slopes = slopes[start_index:][m
[32m+[m[41m    [m
[32m+[m[32m    percentile_90 = np.percentile(slopes, 90)[m
[32m+[m[32m    percentile_50 = np.percentile(slopes, 50)[m
[32m+[m[32m    threshold = -250[m
[32m+[m[32m    # Trouver les indices des pics minimums[m
[32m+[m[32m    minima_indices = argrelextrema(slopes, np.less, order = 10)[0][m
[32m+[m[32m    minima_indices = minima_indices[slopes[minima_indices] < threshold][m
[32m+[m[41m    [m
[32m+[m[32m    peak_height_max = (percentile_90 + percentile_50) / 2[m
[32m+[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m    peaks, _ = find_peaks(slopes, height=peak_height_max)[m
[32m+[m[41m    [m
[32m+[m[32m    #temps de contact au sol[m
[32m+[m[32m    taille_x = len(peaks)[m
[32m+[m[32m    taille_y = len(minima_indices)[m
[32m+[m[41m    [m
[32m+[m[32m    # Remplir le tableau plus petit avec des z√©ros[m
[32m+[m[32m    if taille_x > taille_y:[m
[32m+[m[32m        minima_indices = np.pad(minima_indices, (0, taille_x - taille_y), mode='constant')[m
[32m+[m[32m    else:[m
[32m+[m[32m        peaks = np.pad(peaks, (0, taille_y - taille_x), mode='constant')[m
[32m+[m[41m    [m
[32m+[m[32m    # Cr√©er un tableau en colonnes √† partir de x et y[m
[32m+[m[32m    tableau = np.column_stack((peaks, minima_indices))[m
[32m+[m[41m    [m
[32m+[m[32m    # Cr√©er une nouvelle colonne avec la soustraction entre les donn√©es de la colonne 1 et la colonne 0[m
[32m+[m[32m    tableau = np.column_stack((tableau, abs((tableau[:, 1] - tableau[:, 0]))/60))[m
[32m+[m[41m    [m
[32m+[m[32m    ground_contact = tableau[:, 2][m
[32m+[m[41m    [m
[32m+[m[32m    # Tracer les donn√©es d'acc√©l√©ration[m
[32m+[m[32m    plt.plot(slopes, label="Pente courbe d'acc√©l√©rations")[m
[32m+[m[41m    [m
[32m+[m[32m    # Tracer les pics avec des croix[m
[32m+[m[32m    plt.plot(peaks, slopes[peaks], "x", label="Pics max d√©tect√©s")[m
[32m+[m[32m    plt.plot(minima_indices, slopes[minima_indices], "o", label="Pics min d√©tect√©s")[m
[32m+[m[41m    [m
[32m+[m[32m    # L√©gende et √©tiquettes des axes[m
[32m+[m[32m    plt.legend()[m
[32m+[m[32m    plt.xlabel("√âchantillons")[m
[32m+[m[32m    plt.ylabel("Pente courbe d'acc√©l√©rations")[m
[32m+[m[41m    [m
[32m+[m[32m    print(ground_contact)[m
[32m+[m[32m    median_ground_contact = np.median(ground_contact)[m
[32m+[m[41m    [m
[32m+[m[32m    print("M√©diane temps de contact au sol :", median_ground_contact)[m
[32m+[m[41m    [m
[32m+[m[32m    tps_course = round((len(slopes)/60), 3)[m
[32m+[m[32m    print("temps de course en s :", tps_course)[m
[32m+[m[41m    [m
[32m+[m[32m    distance = 30[m
[32m+[m[41m    [m
[32m+[m[32m    vitesse = round((distance / tps_course), 3)[m
[32m+[m[32m    print("vitesse moyenne de course :", vitesse, "m/s", "\n", "ou", round((vitesse*3.6),3), "km/h")[m
[32m+[m[41m    [m
[32m+[m[32m    print("le nombre de foul√©e est : ", len(peaks), "pas", "\n", "ou", "\n", (((len(peaks))*60)/tps_course), "ppm (pas par minute)")[m
[32m+[m[41m    [m
[32m+[m[32m    longueur_foulee = distance/len(peaks)[m
[32m+[m[41m    [m
[32m+[m[32m    print("foul√©e moyenne de :",longueur_foulee, "m")[m
[32m+[m[41m    [m
[32m+[m[32m    # Sauvegardez le graphique en tant qu'image PNG[m
[32m+[m[32m    plt.savefig('static/mon_graphique.png', bbox_inches='tight')[m
[32m+[m[32m    # Cr√©ez un dictionnaire avec les r√©sultats d'analyse que vous souhaitez afficher[m
[32m+[m[32m    resultats = {[m
[32m+[m[32m        'ground_contact': ground_contact,[m
[32m+[m[32m        'median_ground_contact': round(median_ground_contact, 3),[m
[32m+[m[32m        'tps_course': tps_course,[m
[32m+[m[32m        'vitesse': vitesse,[m
[32m+[m[32m        'vitesse_km_h': round((vitesse * 3.6), 3),[m
[32m+[m[32m        'nombre_foulees': len(peaks),[m
[32m+[m[32m        'ppm': round(((len(peaks) * 60) / tps_course), 3),[m
[32m+[m[32m        'longueur_foulee': round(longueur_foulee,3)[m
[32m+[m[32m}[m
[32m+[m[32m    return resultats[m
[32m+[m
[1mdiff --git a/static/mon_graphique.png b/static/mon_graphique.png[m
[1mnew file mode 100644[m
[1mindex 0000000..4f1b38e[m
Binary files /dev/null and b/static/mon_graphique.png differ
[1mdiff --git a/templates/analyse.html b/templates/analyse.html[m
[1mnew file mode 100644[m
[1mindex 0000000..799a566[m
[1m--- /dev/null[m
[1m+++ b/templates/analyse.html[m
[36m@@ -0,0 +1,207 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html lang="fr">[m
[32m+[m[32m<head>[m
[32m+[m[32m    <meta charset="UTF-8">[m
[32m+[m[32m    <meta name="viewport" content="width=device-width, initial-scale=1.0">[m
[32m+[m[32m    <title>Projet IMU Digisport</title>[m
[32m+[m[32m    <style>[m
[32m+[m[32m        header {[m
[32m+[m[32m            background-color: #000000;[m
[32m+[m[32m            color: #fff;[m
[32m+[m[32m            padding: 10px;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        nav {[m
[32m+[m[32m            display: flex;[m
[32m+[m[32m            justify-content: space-between;[m
[32m+[m[32m            padding: 10px;[m
[32m+[m[32m            background-color: #ff6852;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        nav ul {[m
[32m+[m[32m            list-style: none;[m
[32m+[m[32m            display: flex;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        nav li {[m
[32m+[m[32m            margin-right: 10px;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        .btn {[m
[32m+[m[32m            display: inline-block;[m
[32m+[m[32m            padding: 10px;[m
[32m+[m[32m            border: none;[m
[32m+[m[32m            border-radius: 5px;[m
[32m+[m[32m            background-color: #000000;[m
[32m+[m[32m            color: #fff;[m
[32m+[m[32m            text-decoration: none;[m
[32m+[m[32m            font-weight: bold;[m
[32m+[m[32m            text-transform: uppercase;[m
[32m+[m[32m            margin-right: 10px;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        .btn:hover {[m
[32m+[m[32m            background-color: #000000;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        .content-wrapper {[m
[32m+[m[32m            display: flex;[m
[32m+[m[32m            justify-content: space-between;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        .results {[m
[32m+[m[32m            flex: 1;[m
[32m+[m[32m            padding-right: 20px;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        .graph {[m
[32m+[m[32m            flex: 1;[m
[32m+[m[32m            padding-left: 20px;[m
[32m+[m[32m            text-align: center;[m
[32m+[m[41m            [m
[32m+[m[32m        }[m
[32m+[m[41m            [m
[32m+[m[32m        .graph-container {[m
[32m+[m[32m            display: flex;[m
[32m+[m[32m            justify-content: center;[m
[32m+[m[32m            align-items: center;[m
[32m+[m[32m            height: 100%;[m
[32m+[m[41m            [m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        table {[m
[32m+[m[32m            width: 100%;[m
[32m+[m[32m            border-collapse: collapse;[m
[32m+[m[41m        [m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        th, td {[m
[32m+[m[32m            border: 1px solid #ccc;[m
[32m+[m[32m            padding: 8px;[m
[32m+[m[32m            text-align: center;[m
[32m+[m[41m            [m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        th {[m
[32m+[m[32m            background-color: #f2f2f2;[m
[32m+[m[32m            font-weight: bold;[m
[32m+[m[41m            [m
[32m+[m[32m        }[m
[32m+[m[41m          [m
[32m+[m[41m        [m
[32m+[m[32m        h1 {[m
[32m+[m[32m            text-align: center;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        h2 {[m
[32m+[m[32m            text-align: center;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        footer {[m
[32m+[m[32m            background-color: #000000;[m
[32m+[m[32m            color: #fff;[m
[32m+[m[32m            padding: 10px;[m
[32m+[m[32m            text-align: center;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        .footer-container {[m
[32m+[m[32m          display: flex;[m
[32m+[m[32m          justify-content: space-between;[m
[32m+[m[32m          align-items: center;[m
[32m+[m[41m        [m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m         /* Ajout√© pour d√©finir une hauteur maximale pour le contenu principal */[m
[32m+[m[32m        main {[m
[32m+[m[32m            max-height: calc(100% - 60px - 60px); /* 60px est la hauteur du header et du footer */[m
[32m+[m[32m            overflow: auto;[m
[32m+[m[32m        }[m
[32m+[m[32m    </style>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m[32m    <header>[m
[32m+[m[32m        <h1>Analyse d'un sprint √† partir d'un IMU (Xsens DOT)</h1>[m
[32m+[m[32m    </header>[m
[32m+[m[32m        <nav>[m
[32m+[m[32m            <ul>[m
[32m+[m[32m                <li><a href="#" class="btn">Accueil</a></li>[m
[32m+[m[32m                <li><a href="#" class="btn">√Ä propos du projet</a></li>[m
[32m+[m[32m                <li><a href="historique.html" class="btn">Historique des tests</a></li>[m
[32m+[m[32m                <li><a href="#" class="btn">Contact</a></li>[m
[32m+[m[32m            </nav>[m
[32m+[m[32m          </ul>[m
[32m+[m[32m      </div>[m
[32m+[m[32m</nav>[m
[32m+[m[32m        <main>[m
[32m+[m[32m        <div class="content-wrapper">[m
[32m+[m[32m             <div class="results">[m[41m   [m
[32m+[m[32m                <h2>R√©sultats d'analyse</h2>[m
[32m+[m[32m                    <form action="{{ url_for('analyse') }}" method="POST">[m
[32m+[m[32m                        <label for="distance">Distance (en m√®tres) :</label>[m
[32m+[m[32m                        <input type="number" id="distance" name="distance" step="0.01" required>[m
[32m+[m[32m                        <input type="submit" value="Mettre √† jour la distance">[m
[32m+[m[32m                    </form>[m
[32m+[m[32m                    <table>[m
[32m+[m[32m                        <tr>[m
[32m+[m[32m                            <th>param√®tres √©tudi√©s</th>[m
[32m+[m[32m                            <th> Donn√©es</th>[m
[32m+[m[32m                            <th>unit√©</th>[m
[32m+[m[32m                        </tr>[m
[32m+[m[32m                        <tr>[m
[32m+[m[32m                            <th>Temps de contact m√©dian</th>[m
[32m+[m[32m                            <td>{{ resultats.median_ground_contact }}</td>[m
[32m+[m[32m                            <td>en seconde</td>[m
[32m+[m[32m                        </tr>[m
[32m+[m[32m                        <tr>[m
[32m+[m[32m                            <th>Temps de course</th>[m
[32m+[m[32m                            <td>{{ resultats.tps_course }}</td>[m
[32m+[m[32m                            <td>en seconde</td>[m
[32m+[m[32m                        </tr>[m
[32m+[m[32m                        <tr>[m
[32m+[m[32m                            <th>Vitesse moyenne de course</th>[m
[32m+[m[32m                            <td>{{ resultats.vitesse }} m/s</td>[m
[32m+[m[32m                            <td>en m/s</td>[m
[32m+[m[32m                        </tr>[m
[32m+[m[32m                        <tr>[m
[32m+[m[32m                            <th>Vitesse moyenne de course</th>[m
[32m+[m[32m                            <td>{{ resultats.vitesse_km_h }} km/h</td>[m
[32m+[m[32m                            <td>en km/h</td>[m
[32m+[m[32m                        </tr>[m
[32m+[m[32m                        <tr>[m
[32m+[m[32m                            <th>Nombre de foul√©es</th>[m
[32m+[m[32m                            <td>{{ resultats.nombre_foulees }}</td>[m
[32m+[m[32m                            <td>sur la course</td>[m
[32m+[m[32m                        </tr>[m
[32m+[m[32m                        <tr>[m
[32m+[m[32m                            <th>Nombre de foul√©es</th>[m
[32m+[m[32m                            <td>{{ resultats.ppm }}</td>[m
[32m+[m[32m                            <td>en ppm (pas par minutes)</td>[m
[32m+[m[32m                        </tr>[m
[32m+[m[32m                        <tr>[m
[32m+[m[32m                            <th>Foul√©e moyenne de</th>[m
[32m+[m[32m                            <td>{{ resultats.longueur_foulee}}</td>[m
[32m+[m[32m                            <td>en m√®tres</td>[m
[32m+[m[32m                        </tr>[m
[32m+[m[32m                </table>[m
[32m+[m[32m            </div>[m
[32m+[m[32m            <div class='graph'>[m[41m            [m
[32m+[m[32m                <h2>Graphique d'analyse</h2>[m
[32m+[m[32m                <div class='graph-container'>[m
[32m+[m[32m                    <img src="{{ url_for('static', filename='mon_graphique.png') }}" alt="Mon graphique" class="graphique">[m
[32m+[m[32m                </div>[m
[32m+[m[32m            </div>[m
[32m+[m[32m        </div>[m
[32m+[m[32m      </main>[m
[32m+[m[32m        <footer>[m
[32m+[m[32m            <div class="footer-container">[m
[32m+[m[32m                <div class="footer-info">[m
[32m+[m[32m                    <p>Copyright ¬© 2023 Projet IMU Digisport</p>[m
[32m+[m[32m                    <p> By Aymeric Fontaine</p>[m
[32m+[m[32m                    <p> Nour Ait Kadour</p>[m
[32m+[m[32m                    <p> Marwa Gnaoui</p>[m
[32m+[m[32m                    <p> Kilian Bertholon</p>[m
[32m+[m[32m                </div>[m
[32m+[m[32m            </div>[m
[32m+[m[32m        </footer>[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
\ No newline at end of file[m
[1mdiff --git a/templates/historique.html b/templates/historique.html[m
[1mnew file mode 100644[m
[1mindex 0000000..07f2a45[m
[1m--- /dev/null[m
[1m+++ b/templates/historique.html[m
[36m@@ -0,0 +1,148 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html lang="fr">[m
[32m+[m[32m<head>[m
[32m+[m[32m  <meta charset="UTF-8">[m
[32m+[m[32m    <meta name="viewport" content="width=device-width, initial-scale=1.0">[m
[32m+[m[32m    <title>Historique des tests</title>[m
[32m+[m[32m    <style>[m
[32m+[m[32m        header {[m
[32m+[m[32m            background-color: #000000;[m
[32m+[m[32m            color: #fff;[m
[32m+[m[32m            padding: 10px;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        nav {[m
[32m+[m[32m            display: flex;[m
[32m+[m[32m            justify-content: space-between;[m
[32m+[m[32m            padding: 10px;[m
[32m+[m[32m            background-color: #ff6852;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        nav ul {[m
[32m+[m[32m            list-style: none;[m
[32m+[m[32m            display: flex;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        nav li {[m
[32m+[m[32m            margin-right: 10px;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        .btn {[m
[32m+[m[32m            display: inline-block;[m
[32m+[m[32m            padding: 10px;[m
[32m+[m[32m            border: none;[m
[32m+[m[32m            border-radius: 5px;[m
[32m+[m[32m            background-color: #000000;[m
[32m+[m[32m            color: #fff;[m
[32m+[m[32m            text-decoration: none;[m
[32m+[m[32m            font-weight: bold;[m
[32m+[m[32m            text-transform: uppercase;[m
[32m+[m[32m            margin-right: 10px;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        .btn:hover {[m
[32m+[m[32m            background-color: #000000;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        .graphique {[m
[32m+[m[32m            width: 500px;[m
[32m+[m[32m            height: 300px;[m
[32m+[m[32m            border: 1px solid #ccc;[m
[32m+[m[32m            box-shadow: 2px 2px 5px #ccc;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        section {[m
[32m+[m[32m            display: flex;[m
[32m+[m[32m            justify-content: space-between;[m
[32m+[m[32m            margin-bottom: 20px;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        article {[m
[32m+[m[32m            width: 45%;[m
[32m+[m[32m            background-color: #f7f7f7;[m
[32m+[m[32m            padding: 10px;[m
[32m+[m[32m            border: 1px solid #ccc;[m
[32m+[m[32m            box-shadow: 2px 2px 5px #ccc;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        h1 {[m
[32m+[m[32m            text-align: center;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        h2 {[m
[32m+[m[32m            text-align: center;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        footer {[m
[32m+[m[32m            background-color: #000000;[m
[32m+[m[32m            color: #fff;[m
[32m+[m[32m            padding: 10px;[m
[32m+[m[32m            text-align: center;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        .footer-container {[m
[32m+[m[32m          display: flex;[m
[32m+[m[32m          justify-content: space-between;[m
[32m+[m[32m          align-items: right;[m
[32m+[m[32m}[m
[32m+[m[32m    </style>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m[32m      <h1>Analyse d'un sprint √† partir d'un IMU (Xsens DOT)</h1>[m
[32m+[m[32m  </header>[m
[32m+[m[32m  <nav>[m
[32m+[m[32m      <ul>[m
[32m+[m[32m          <li><a href="#" class="btn">Accueil</a></li>[m
[32m+[m[32m          <li><a href="#" class="btn">√Ä propos du projet</a></li>[m
[32m+[m[32m          <li><a href="historique.html" class="btn">Historique des tests</a></li>[m
[32m+[m[32m          <li><a href="#" class="btn">Contact</a></li>[m
[32m+[m[32m  <table>[m
[32m+[m[32m    <thead>[m
[32m+[m[32m      <tr>[m
[32m+[m[32m        <th>Date du test</th>[m
[32m+[m[32m        <th>Temps de contact</th>[m
[32m+[m[32m        <th>Temps de contact m√©dian</th>[m
[32m+[m[32m        <th>Temps de course</th>[m
[32m+[m[32m        <th>Vitesse moyenne</th>[m
[32m+[m[32m        <th>Nombre de foul√©es</th>[m
[32m+[m[32m        <th>Longueur de foul√©e moyenne</th>[m
[32m+[m[32m      </tr>[m
[32m+[m[32m    </thead>[m
[32m+[m[32m    <tbody>[m
[32m+[m[32m      <tr>[m
[32m+[m[32m        <td>01/03/2023</td>[m
[32m+[m[32m        <td>0.22 s</td>[m
[32m+[m[32m        <td>0.18 s</td>[m
[32m+[m[32m        <td>12.5 s</td>[m
[32m+[m[32m        <td>4.2 m/s</td>[m
[32m+[m[32m        <td>180 ppm</td>[m
[32m+[m[32m        <td>1.3 m</td>[m
[32m+[m[32m      </tr>[m
[32m+[m[32m      <tr>[m
[32m+[m[32m        <td>15/02/2023</td>[m
[32m+[m[32m        <td>0.25 s</td>[m
[32m+[m[32m        <td>0.20 s</td>[m
[32m+[m[32m        <td>11.2 s</td>[m
[32m+[m[32m        <td>4.5 m/s</td>[m
[32m+[m[32m        <td>185 ppm</td>[m
[32m+[m[32m        <td>1.2 m</td>[m
[32m+[m[32m      </tr>[m
[32m+[m[32m    </tbody>[m
[32m+[m[32m  </table>[m
[32m+[m[32m  <footer>[m
[32m+[m[32m  <div class="footer-container">[m
[32m+[m[32m      <div class="footer-info">[m
[32m+[m[32m          <p>Copyright ¬© 2023 Projet IMU Digisport</p>[m
[32m+[m[32m          <p> By Aymeric Fontaine</p>[m
[32m+[m[32m          <p> Nour Ait Kadour</p>[m
[32m+[m[32m        